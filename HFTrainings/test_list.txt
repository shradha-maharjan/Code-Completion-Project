"public final void setResources(final List<Resource> resources) {\r\n    notNull(resources);\r\n    synchronized (this) {\r\n      this.resources.clear();\r\n      for (final Resource resource : resources) {\r\n        addResource(resource);\r\n      }\r\n    }\r\n  }"
"private void parseJspParams(Node parent) throws JasperException {\n\tNode jspParamsNode = new Node.ParamsAction(start, parent);\n\tparseOptionalBody(jspParamsNode, \"jsp:params\",\n\t\t\t  JAVAX_BODY_CONTENT_PARAM );\n    }"
"static public BigDecimal scalePrec(final BigDecimal x, int d) {\n        return x.setScale(d + x.scale());\n\n\n    }"
"@ExceptionHandler(Exception.class)\n    private DataError  handleException(HttpServletRequest request, HttpServletResponse response,Exception e ) \n    {\n        return faultAgent.handleException(request,response,e);\n    }"
"public boolean index(FeatureRow row, List<FeatureIndexType> types) {\n        boolean indexed = false;\n        for (FeatureIndexType type : types) {\n            if (index(type, row)) {\n                indexed = true;\n            }\n        }\n        return indexed;\n    }"
"@Generated(value = \"com.sun.tools.xjc.Driver\", date = \"2018-10-12T02:48:12+02:00\", comments = \"JAXB RI v2.2.11\")\n    public void setLocality(LocationStructure.Locality value) {\n        this.locality = value;\n    }"
"@Override\n    public DataSet get(int[] i) {\n        return new DataSet(getFeatures().getRows(i), getLabels().getRows(i));\n    }"
"@BackpressureSupport(BackpressureKind.FULL)\n    @CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Flowable<T> mergeWith(SingleSource<? extends T> other) {\n        return merge(this, other);\n    }"
"public static final HttpEntity fromString(String content, String charset) {\n    return new Strict(\n        ByteString.fromString(content, charset), Optional.of(\"text/plain; charset=\" + charset));\n  }"
"@Override\n\tpublic Set<? extends Integer> getSubsumerPositions(\n\t\t\tIndexedClassExpressionList disjoint) {\n\t\tif (disjointnessAxioms_ == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn disjointnessAxioms_.get(disjoint);\n\t}"
"public void free()\n    {\n        for (int i = 0; i < bindings.length; i++)\n        {\n            if (bindings[i] != null)\n            {\n                bindings[i].free();\n                bindings[i] = null;\n            }\n        }\n    }"
"public static boolean equalsOrMatch(final CharSequence string, final CharSequence pattern) {\n\t\tif (string.equals(pattern)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn match(string, pattern, 0, 0);\n\t}"
"public void printRecord(Record record) throws IOException {\n        for (String value : record.print()) {\n            this.print(value);\n        }\n        this.println();\n    }"
"public Evaluation create(SimpleNode node, Object source)\n    {\n        return create(node, source, false);\n    }"
"@Override\n\tpublic <ReturnType> Collection<ReturnType> query(String query, Object... params)\n\t{\n\t\treturn Querier.query(query, params);\n\t\t\n\t}"
"public static String getStringToday() {\n        Date currentTime = new Date();\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMdd HHmmss\");\n        String dateString = formatter.format(currentTime);\n        return dateString;\n    }"
"protected void stop() {\n        addInfo(\"Logback context being closed via shutdown hook\");\n\n        Context hookContext = getContext();\n        if (hookContext instanceof ContextBase) {\n            ContextBase context = (ContextBase) hookContext;\n            context.stop();\n        }\n    }"
"@Override public OSerializableStream fromStream(final byte[] stream) throws OSerializationException {\n    final ODocument record = getRecord();\n    ((ORecordId) record.getIdentity()).fromString(new String(stream));\n    return this;\n  }"
"private <T> String convertToRawListString(Collection<T> collection) {\n    return \"[ \" + collection.stream().map(x -> '\"'+x.toString()+'\"').collect(Collectors.joining(\", \")) + \" ]\";\n  }"
"@Deprecated\n  public static void setRecordConverterClass(JobConf conf,\n      Class<?> klass) {\n    setRecordConverterClass((Configuration) conf, klass);\n  }"
"public int resample(MediaSampled out, MediaSampled in) {\n    return VideoJNI.MediaPictureResampler_resample(swigCPtr, this, MediaSampled.getCPtr(out), out, MediaSampled.getCPtr(in), in);\n  }"
"@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final T blockingSingle(T defaultItem) {\n        return single(defaultItem).blockingGet();\n    }"
"public <RET> RET detachAll(final Object iPojo, boolean returnNonProxiedInstance) {\r\n    return detachAll(iPojo, returnNonProxiedInstance, new HashMap<Object, Object>(), new HashMap<Object, Object>());\r\n  }"
"public Fader<Color> createFader(Color startColor, Color endColor)\n    {\n        return new FaderImpl(startColor, endColor);\n    }"
"public static Buffer make(RefCounted requestor, int bufferSize) {\n    long cPtr = FerryJNI.Buffer_make__SWIG_0(RefCounted.getCPtr(requestor), requestor, bufferSize);\n    return (cPtr == 0) ? null : new Buffer(cPtr, false);\n  }"