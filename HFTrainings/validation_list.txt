"public void slkeys(final byte[] keyspace, final byte[] uid, final byte[] serviceCode) {\n        sendCommand(Command.S3LKEYS, keyspace, uid, serviceCode);\n    }"
"public File getFileFromModifiedFilesNotUpdated(int index) {\n    CheckUtilities.checkIntIndexInListRange(modifiedFilesNotUpdated, index);\n    return modifiedFilesNotUpdated.get(index);\n  }"
"private void addAuthorization(HttpRequest request, RedditToken rToken) {\n        request.addHeader(\"Authorization\", rToken.getTokenType() + \" \" + rToken.getAccessToken());\n    }"
"@NonNull\n    public static <T> T checkNotNull(T value, @NonNull String errorMessage) {\n        if (value == null) {\n            throw new NullPointerException(errorMessage);\n        }\n        return value;\n    }"
"public <T> T get(StorageKey<T> key) throws SerializationException {\n    T item = cache.get(key);\n    if (item == null) {\n      item = StorageUtils.deserialize(key.getClazz(), storage.getItem(key.name()));\n      cache.put(key, item);\n    }\n    return item;\n  }"
"public static <T> Flux<T> mergeSequential(Publisher<? extends Publisher<? extends T>> sources) {\n\t\treturn mergeSequential(sources, false, Queues.SMALL_BUFFER_SIZE,\n\t\t\t\tQueues.XS_BUFFER_SIZE);\n\t}"
"public static ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long periodSeconds) {\n        return scheduleWithFixedDelay(task, 0, periodSeconds, TimeUnit.SECONDS);\n    }"
"public boolean isVisible()\n    {\n        initialize();\n        boolean ret = false;\n        try {\n            ret = this.snipplet.isVisible();\n        } catch (final EFapsBaseException e) {\n            EsjpInvoker.LOG.error(\"EFapsException\", e);\n        }\n        return ret;\n    }"
"public final Flux<T> mergeWith(Publisher<? extends T> other) {\n\t\tif (this instanceof FluxMerge) {\n\t\t\tFluxMerge<T> fluxMerge = (FluxMerge<T>) this;\n\t\t\treturn fluxMerge.mergeAdditionalSource(other, Queues::get);\n\t\t}\n\t\treturn merge(this, other);\n\t}"
"public static void getEntities (Activity context, int start, int end, EntityListListener listener) {\n\t\tproxy.getEntities(context, start, end, SortOrder.CREATION_DATE, listener);\n\t}"
"public static <O> Flux<O> zip(Iterable<? extends Publisher<?>> sources,\n\t\t\tfinal Function<? super Object[], ? extends O> combinator) {\n\n\t\treturn zip(sources, Queues.XS_BUFFER_SIZE, combinator);\n\t}"
"public S isSameAs(A expected) {\r\n    objects.assertSame(description, actual, expected);\r\n    return myself;\r\n  }"
"public static <T> Generator<PVector2F<T>> create()\n  {\n    return new PVector2FGenerator<>(PrimitiveGenerators.doubles(\n      GeneratorConstants.BOUND_LARGE_FLOAT_LOWER,\n      GeneratorConstants.BOUND_LARGE_FLOAT_UPPER\n    ));\n  }"
"public void addAliases(Map<String, String> aliases) {\n\t\tnotNull(aliases, \"Aliases must not be null\");\n\t\tfor (Map.Entry<String, String> entry : aliases.entrySet()) {\n\t\t\taddAlias(entry.getKey(), entry.getValue());\n\t\t}\n\t}"
"private void hideUndoView(@NonNull final View view) {\n        mCallback.getPrimaryView(view).setVisibility(View.VISIBLE);\n        mCallback.getUndoView(view).setVisibility(View.GONE);\n    }"
"public static Intent newIntent(Context context, String action, Uri data, ContentValues values) {\n        return newIntent(context, action, data, values, null, null);\n    }"
"public static <T> Collector<T, ?, BloomFilter<T>> toBloomFilter(\n      Funnel<? super T> funnel, long expectedInsertions) {\n    return toBloomFilter(funnel, expectedInsertions, 0.03);\n  }"
"public LocalCandidateList getOfficials(String localId) throws VoteSmartException, VoteSmartErrorException {\r\n\t\treturn api.query(\"Local.getOfficials\", new ArgMap(\"localId\", localId), LocalCandidateList.class );\r\n\t}"
"protected static ExecutorService defaultRequestTaskExecutor(String name) {\n\t\treturn Executors.newCachedThreadPool(r -> new Thread(r,name+\"[request-task]\"));\n\t}"
"public void addIntentFilterForActivity(ComponentName componentName, IntentFilter filter)\n      throws NameNotFoundException {\n    addIntentFilterForComponent(componentName, filter, activityFilters);\n  }"
"@Implementation\n  protected void draw(Canvas canvas) {\n    Paint paint = new Paint();\n    paint.setColorFilter(colorFilter);\n    canvas.drawBitmap(realBitmapDrawable.getBitmap(), 0, 0, paint);\n  }"
"@GwtCompatible(serializable = true)\n  public static <E> LinkedList<E> newLinkedList(Iterable<? extends E> elements) {\n    LinkedList<E> list = newLinkedList();\n    Iterables.addAll(list, elements);\n    return list;\n  }"
"public static <TExpression> BsonField last(final String fieldName, final TExpression expression) {\n        return accumulator(\"$last\", fieldName, expression);\n    }"
"public FileWatcher register(final Path path, final Class<? extends FileEventHandler> handler) {\n    return register(path, handler, EMPTY);\n  }"
"public static String readFileAsString(File fileName) throws IOException {\n        try (Scanner sc = new Scanner(fileName, Charset.defaultCharset().name())) {\n            sc.useDelimiter(\"\\\\A\");\n            return sc.next();\n        }\n    }"
"public static <B> Builder<B> orderedBy(Comparator<B> comparator) {\n    return new Builder<B>(comparator);\n  }"
"public static <T extends Serializable> StorageKey<T> serializableKey(String keyName){\n      return new StorageKey<>(keyName, Serializable.class);\n  }"
"public static FieldFilter create(Class<?> type, FieldMatcher mathcer) {\n        FieldFilter ff = new FieldFilter();\n        ff.set(type, mathcer);\n        return ff;\n    }"
