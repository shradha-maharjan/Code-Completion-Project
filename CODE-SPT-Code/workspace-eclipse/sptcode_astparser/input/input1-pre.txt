file getFile ( string dirsProp , string path ) throws ioException { string [ ] dirs = getTrimmedStrings ( dirsProp ) ; int hashCode = path . hashCode ( ) ; for ( int i = 0 ; i < dirs . length ; i ++ ) { int index = ( hashCode + i & [MSK] ) % dirs . length ; file file = new file ( dirs [ index ] , path ) ; file dir = file . getParentFile ( ) ; if ( dir . exists ( ) || dir . mkdirs ( ) ) { return file ; } } throw new ioException ( "NoValid local directories in property: " + dirsProp ) ; }
@ override void transition ( rmNodeImpl rmNode , rmNodeEvent event ) { rmNodeReconnectEvent reconnectEvent = ( rmNodeReconnectEvent ) event ; rmNode newNode = reconnectEvent . getReconnectedNode ( ) ; rmNode . nodeManagerVersion = newNode . getNodeManagerVersion ( ) ; rmNode . httpPort = newNode . getHttpPort ( ) ; rmNode . httpAddress = newNode . getHttpAddress ( ) ; rmNode . resourceOption = newNode . getResourceOption ( ) ; [MSK] . setResponseId ( 0 ) ; if ( null != reconnectEvent . getRunningApplications ( ) ) { for ( applicationId appId : reconnectEvent . getRunningApplications ( ) ) { handleRunningAppOnNode ( rmNode , rmNode . context , appId , rmNode . nodeId ) ; } } rmNode . context . getDispatcher ( ) . getEventHandler ( ) . handle ( new nodesListManagerEvent ( nodesListManagerEventType . nodeUsable , rmNode ) ) ; }
@ override void updatePipeline ( string clientName , extendedBlock oldBlock , extendedBlock newBlock , datanodeId [ ] newNodes , string [ ] storageIDs ) throws ioException { updatePipelineRequestProto req = updatePipelineRequestProto . newBuilder ( ) . setClientName ( clientName ) . setOldBlock ( pbHelper . convert ( oldBlock ) ) . setNewBlock ( pbHelper . convert ( newBlock ) ) . addAllNewNodes ( arrays . asList ( pbHelper . convert ( newNodes ) ) ) . addAllStorageIDs ( storageIDs == null ? null : [MSK] ) . build ( ) ; try { rpcProxy . updatePipeline ( null , req ) ; } catch ( serviceException e ) { throw protobufHelper . getRemoteException ( e ) ; } } 
void waitForState ( task task , taskState finalState ) throws exception { int timeoutSecs = 0 ; taskReport report = task . getReport ( ) ; while ( ! finalState . equals ( report . getTaskState ( ) ) && timeoutSecs ++ < 20 ) { system . out . println ( "TaskState for " + [MSK] + "Is : " + report . getTaskState ( ) + "Waiting for state : " + finalState + "Progress : " + report . getProgress ( ) ) ; report = task . getReport ( ) ; thread . sleep ( 500 ) ; } system . out . println ( "TaskState is : " + report . getTaskState ( ) ) ; assert . assertEquals ( "TaskState is not correct (timedout)" , finalState , report . getTaskState ( ) ) ; }
inetSocketAddress getConnectAddress ( server server ) { return getConnectAddress ( [MSK] ) ; }
list < file > getEditsInStorageDir ( storageDirectory sd ) { arrayList < file > files = new arrayList < file > ( ) ; file edits = nnStorage . getStorageFile ( sd , nameNodeFile . edits ) ; assert edits . exists ( ) : "ExpectedEdits file at " + edits ; files . add ( edits ) ; file editsNew = [MSK] ; if ( editsNew . exists ( ) ) { files . add ( editsNew ) ; } return files ; }



